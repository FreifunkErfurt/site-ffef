name: Build ffef firmware

on:
  workflow_dispatch:
  push:
    tags:
      - v*

jobs:
  build_firmware:
    strategy:
      fail-fast: false
      matrix:
        target: [ar71xx-generic, ar71xx-tiny, ar71xx-nand, ath79-generic, brcm2708-bcm2708, brcm2708-bcm2709, ipq40xx-generic, ipq806x-generic, lantiq-xrx200, lantiq-xway, mpc85xx-generic, mpc85xx-p1020, ramips-mt7620, ramips-mt7621, ramips-mt76x8, ramips-rt305x, sunxi-cortexa7, x86-generic, x86-geode, x86-legacy, x86-64, ar71xx-mikrotik, brcm2708-bcm2710, mvebu-cortexa9]
    runs-on: ubuntu-latest
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 4096
          swap-size-mb: 1024
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
      - name: Checkout
        uses: actions/checkout@master
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Set tag
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python2.7 python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf
      - name: build target ${{ matrix.target }}
        id: compile
        run: |
          git checkout -b patched && git checkout ${{ steps.extract_branch.outputs.branch }}
          make BROKEN=1 GLUON_TARGETS=${{ matrix.target }} GLUON_RELEASE=${{ steps.vars.outputs.tag }} V=s
          echo "::set-output name=status::success"
      - name: Upload firmware ${{ matrix.target }}
        uses: actions/upload-artifact@master
        if: steps.compile.outputs.status == 'success'
        with:
          name: ${{ matrix.target }}_output
          path: ./output

  create_release:
    runs-on: ubuntu-latest
    needs: build_firmware
    outputs:
          output1: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  upload_release:
    strategy:
      fail-fast: false
      matrix:
        target: [ar71xx-generic, ar71xx-tiny, ar71xx-nand, ath79-generic, brcm2708-bcm2708, brcm2708-bcm2709, ipq40xx-generic, ipq806x-generic, lantiq-xrx200, lantiq-xway, mpc85xx-generic, mpc85xx-p1020, ramips-mt7620, ramips-mt7621, ramips-mt76x8, ramips-rt305x, sunxi-cortexa7, x86-generic, x86-geode, x86-legacy, x86-64, ar71xx-mikrotik, brcm2708-bcm2710, mvebu-cortexa9]
    runs-on: ubuntu-latest
    needs: create_release
    steps:
      - name: Download Artifact ${{ matrix.target }}
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.target }}_output
          path: ${{ matrix.target }}_output
      - name: Create ${{ matrix.target }}_output.tar.gz
        run: tar zcvf ${{ matrix.target }}_output.tar.gz ${{ matrix.target }}_output
      - name: Upload Release Asset ${{ matrix.target }}
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.output1 }}
          asset_path: ./${{ matrix.target }}_output.tar.gz
          asset_name: ${{ matrix.target }}_output.tar.gz
          asset_content_type: application/gzip
